
# These substitutions allow the end user to override certain values
substitutions:
  name: "air-filter-controller-template"
  friendly_name: "Air Filter Controller Template"

esphome:
  name: "${name}"
  # Friendly names are used where appropriate in Home Assistant
  friendly_name: "${friendly_name}"
  # Users will want human-readable unique names for each device.
  name_add_mac_suffix: false

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: esphome.air-filter-controller-template
    version: "1.0"

esp32:
  board: adafruit_feather_esp32s3_tft
  framework:
    type: arduino

# To be able to get logs from the device via serial and api.
logger:
  level: INFO

# API is a requirement of the dashboard import.
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

# OTA is required for Over-the-Air updating
ota:
  platform: esphome

safe_mode:
  # Safe mode not needed for local development.
  # https://esphome.io/components/safe_mode
  # disabled: true

# TODO: fill this out or remove it
# This should point to the public location of this yaml file.
# dashboard_import:
#   package_import_url: github://esphome/esphome-project-template/project-template-esp32.yaml@v6
#   import_full_config: false # or true

output:
  - platform: ledc
    id: buzzer_output
    pin:
      number: GPIO47
      # Buzzer is specced at 50mA, and there's a 47ohm resistor.
      drive_strength: "40mA"
    frequency: "6kHz"
    channel: 2
  - platform: ledc
    pin: GPIO48
    id: fan_pwm0
    frequency: "20kHz"
    channel: 0
  - platform: ledc
    pin: GPIO39
    id: fan_pwm1
    frequency: "20kHz"
    channel: 0
  - platform: ledc
    pin:
      number: GPIO40
      # LED is specced at 30mA, and there's a 10ohm resistor.
      drive_strength: "20mA"
    id: led_g
    frequency: "20kHz"
    channel: 0
  - platform: ledc
    pin: 
      number: GPIO41
      # LED is specced at 30mA, and there's a 10ohm resistor.
      drive_strength: "20mA"
    id: led_r
    frequency: "20kHz"
    channel: 0
  - platform: ledc
    pin:
      number: GPIO42
      # LED is specced at 30mA, and there's a 10ohm resistor.
      drive_strength: "20mA"
    id: led_b
    frequency: "20kHz"
    channel: 0

# Buzzer
# https://esphome.io/components/rtttl
rtttl:
  output: buzzer_output
  id: buzzer
  # Note: this actually sets the duty cycle, so 0.5 is maximum volume
  gain: 0.5

button:
  - platform: template
    name: "Buzzer Chime"
    on_press:
      # See https://www.mobilefish.com/tutorials/rtttl/rtttl_quickguide_specification.html
      - rtttl.play: 'siren:d=8,o=7,b=100:d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e'

# Fan
# https://esphome.io/components/switch/gpio
switch:
  - platform: gpio
    pin: GPIO21
    name: "Fan Power"
    id: fan_power
  - platform: template
    name: "Buzzer Continuous"
    id: buzzer_continuous
    optimistic: true
    turn_on_action:
      then:
        - output.turn_on: buzzer_output
        - output.ledc.set_frequency:
            id: buzzer_output
            frequency: "3kHz"
        - output.set_level:
            id: buzzer_output
            level: "50%"
    turn_off_action:
      then:
        - output.turn_off: buzzer_output

# https://esphome.io/components/fan/speed
fan:
  - platform: speed
    output: fan_pwm0
    name: Fan PWM0
    id: fan_0
  - platform: speed
    output: fan_pwm1
    id: fan_1
    name: Fan PWM1

# https://esphome.io/components/light/rgb.html
light:
  - platform: rgb
    id: indicator_light
    name: "Indicator Light"
    red: led_r
    green: led_g
    blue: led_b

sensor:
  - platform: pulse_counter
    pin: GPIO4
    name: Fan 0 Tach
    update_interval: 5s

# TODO: add BMP280, it's hooked up with SPI but ESPHome only supports it via I2C
#i2c:
#  sda: 
#  scl: GPIO13
#
#sensor:
#  # https://esphome.io/components/sensor/bmp280.html
#  - platform: bmp280
#    temperature:
#      name: "Board Temperature"
#      oversampling: 16x
#    pressure:
#      name: "Board Pressure"
#      oversampling: 16x
#    update_interval: 5s
