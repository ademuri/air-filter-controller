
# These substitutions allow the end user to override certain values
substitutions:
  name: "air-filter-controller-template"
  friendly_name: "Air Filter Controller Template"

esphome:
  name: "${name}"
  # Friendly names are used where appropriate in Home Assistant
  friendly_name: "${friendly_name}"
  # Users will want human-readable unique names for each device.
  name_add_mac_suffix: false

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: esphome.air-filter-controller-template
    version: "1.0"

  on_boot:
    priority: -100.0
    then:
      - script.execute: update_min_tach

external_components:
  - source:
      type: local
      path: components

esp32:
  # Note: this board definition uses PSRAM, whereas our module
  # (ESP32-S3-WROOM-1-N4) does not have PSRAM. But, it seems to work anyway.
  board: adafruit_feather_esp32s3_tft
  framework:
    type: arduino

# To be able to get logs from the device via serial and api.
logger:
  level: DEBUG
  #logs:
  #  adp2100: VERY_VERBOSE

# API is a requirement of the dashboard import.
api:
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

# OTA is required for Over-the-Air updating
ota:
  platform: esphome

safe_mode:
  # Safe mode not needed for local development.
  # https://esphome.io/components/safe_mode
  disabled: false
  #boot_is_good_after: 40s
  #reboot_timeout: 1min

# TODO: fill this out or remove it
# This should point to the public location of this yaml file.
# dashboard_import:
#   package_import_url: github://esphome/esphome-project-template/project-template-esp32.yaml@v6
#   import_full_config: false # or true

output:
  - platform: ledc
    id: buzzer_output
    pin:
      number: GPIO47
      # Buzzer is specced at 50mA, and there's a 47ohm resistor.
      drive_strength: "40mA"
    frequency: "6kHz"
    channel: 2
  - platform: ledc
    pin: GPIO48
    id: fan_pwm0
    frequency: "20kHz"
    channel: 0
  # Both fan PWM outputs should sync. Using the same LEDC channel means that
  # they will implicitly.
  - platform: ledc
    pin: GPIO39
    id: fan_pwm1
    frequency: "20kHz"
    channel: 0
  - platform: ledc
    pin:
      number: GPIO40
      # LED is specced at 30mA, and there's a 10ohm resistor.
      drive_strength: "20mA"
    id: led_g
    frequency: "20kHz"
    channel: 1
  - platform: ledc
    pin: 
      number: GPIO41
      # LED is specced at 30mA, and there's a 10ohm resistor.
      drive_strength: "20mA"
    id: led_r
    frequency: "20kHz"
    channel: 4
  - platform: ledc
    pin:
      number: GPIO42
      # LED is specced at 30mA, and there's a 10ohm resistor.
      drive_strength: "20mA"
    id: led_b
    frequency: "20kHz"
    channel: 5

# Buzzer
# https://esphome.io/components/rtttl
rtttl:
  output: buzzer_output
  id: buzzer
  # Note: this actually sets the duty cycle, so 0.5 is maximum volume
  gain: 0.5

button:
  - platform: template
    name: "Buzzer Chime"
    on_press:
      # See https://www.mobilefish.com/tutorials/rtttl/rtttl_quickguide_specification.html
      - rtttl.play: 'siren:d=8,o=7,b=100:d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e,d,e'

# Fan
# https://esphome.io/components/switch/gpio
switch:
  - platform: gpio
    pin: GPIO21
    name: "Fan Power"
    id: fan_power
    internal: true
  - platform: template
    name: "Buzzer Continuous"
    id: buzzer_continuous
    optimistic: true
    turn_on_action:
      then:
        - script.execute: turn_on_buzzer
    turn_off_action:
      then:
        - output.turn_off: buzzer_output

# https://esphome.io/components/fan/speed
fan:
  - platform: speed
    output: fan_pwm0
    name: Fan PWM
    id: fan_0
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      then:
        - switch.turn_on: fan_power
    on_turn_off:
      then:
        - switch.turn_off: fan_power
        - sensor.duty_time.reset: filter_runtime_internal

# https://esphome.io/components/light/rgb.html
light:
  - platform: rgb
    id: indicator_light
    name: "Indicator Light"
    red: led_r
    green: led_g
    blue: led_b

sensor:
  - platform: pulse_counter
    pin: GPIO4
    name: Fan 0 Tach
    update_interval: 5s
    id: fan_0_tach
    accuracy_decimals: 0
  - platform: pulse_counter
    pin: GPIO5
    name: Fan 1 Tach
    update_interval: 5s
    id: fan_1_tach
    accuracy_decimals: 0
  - platform: pulse_counter
    pin: GPIO6
    name: Fan 2 Tach
    update_interval: 5s
    id: fan_2_tach
    accuracy_decimals: 0
  - platform: pulse_counter
    pin: GPIO7
    name: Fan 3 Tach
    update_interval: 5s
    id: fan_3_tach
    accuracy_decimals: 0
  - platform: pulse_counter
    pin: GPIO8
    name: Fan 4 Tach
    update_interval: 5s
    id: fan_4_tach
    use_pcnt: false
    accuracy_decimals: 0
  - platform: pulse_counter
    pin: GPIO9
    name: Fan 5 Tach
    update_interval: 5s
    id: fan_5_tach
    use_pcnt: false
    disabled_by_default: true
    accuracy_decimals: 0
  - platform: pulse_counter
    pin: GPIO10
    name: Fan 6 Tach
    update_interval: 5s
    id: fan_6_tach
    use_pcnt: false
    disabled_by_default: true
    accuracy_decimals: 0
  - platform: pulse_counter
    pin: GPIO11
    name: Fan 7 Tach
    update_interval: 5s
    id: fan_7_tach
    use_pcnt: false
    disabled_by_default: true
    accuracy_decimals: 0
  - platform: pulse_counter
    pin: GPIO12
    name: Fan 8 Tach
    update_interval: 5s
    id: fan_8_tach
    use_pcnt: false
    disabled_by_default: true
    accuracy_decimals: 0

  # https://esphome.io/components/sensor/duty_time.html
  - platform: duty_time
    id: filter_runtime
    name: Filter Runtime
    lambda: "return id(fan_0).state;"
    update_interval: 30min
    restore: true

  - platform: duty_time
    name: Filter Runtime Internal
    id: filter_runtime_internal
    lambda: "return id(fan_0).state;"
    update_interval: 5s
    internal: true

  - platform: template
    name: Min Tach
    id: min_tach
    update_interval: never
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    state_class: "measurement"

  # Input voltage via divider. Currently doesn't work, because it's on ADC 2, which doesn't work while WiFi is enabled.
  # TODO: re-enable this once board is revised to use ADC channel 1.
  # - platform: adc
  #   pin: GPIO17
  #   name: "Input Voltage"
  #   update_interval: 10s
  #   attenuation: 11dB
  #   samples: 3
  #   filters:
  #     # R1 = 680k, R2 = 220k
  #     - multiply: 4.0909

  - platform: adp2100
    id: adp2100_sensor
    update_interval: 5s
    pressure:
      id: pressure_drop
      name: Filter Pressure Drop
      unit_of_measurement: "Pa"
    temperature:
      id: temperature
      name: Temperature

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO15
  miso_pin: GPIO14
  interface: hardware

i2c:
  sda: GPIO38
  scl: GPIO18
  scan: true
  frequency: 100kHz

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO1
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Filter Button"
    filters:
      - delayed_off: 10ms

  - platform: gpio
    pin: 
      number: GPIO2
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Speed Button"
    filters:
      - delayed_off: 10ms
    on_press:
      then:
        lambda: |-
            id(fan_speed_toggle) = (id(fan_speed_toggle) + 1) % 3;
            switch (id(fan_speed_toggle)) {
              case 0:
                id(fan_0).make_call().set_speed(60).perform();
                break;
              case 1:
                id(fan_0).make_call().set_speed(80).perform();
                break;
              case 2:
                id(fan_0).make_call().set_speed(100).perform();
                break;
            }

  #- platform: gpio
  #  pin: 
  #    number: GPIO18
  #    inverted: true
  #    mode:
  #      input: true
  #      pullup: true
  #  name: "SW2 Button"
  #  filters:
  #    - delayed_off: 10ms

  #- platform: gpio
  #  pin: 
  #    number: GPIO38
  #    inverted: true
  #    mode:
  #      input: true
  #      pullup: true
  #  name: "SW3 Button"
  #  filters:
  #    - delayed_off: 10ms

  - platform: template
    name: Min Tach Alarm
    id: min_tach_alarm

globals:
  - id: fan_speed_toggle
    type: int
    initial_value: '0'
  - id: num_fans
    type: int
    initial_value: ${num_fans}
  - id: min_tach_alarm_light_threshold
    type: int
    initial_value: ${min_tach_alarm_light_threshold}
  - id: min_tach_alarm_sound_threshold
    type: int
    initial_value: ${min_tach_alarm_sound_threshold}

script:
  - id: turn_on_buzzer
    then:
      - output.turn_on: buzzer_output
      - output.ledc.set_frequency:
          id: buzzer_output
          frequency: "3kHz"
      - output.set_level:
          id: buzzer_output
          level: "50%"
  - id: turn_off_buzzer
    then:
      - switch.template.publish:
          id: buzzer_continuous
          state: OFF
      - output.turn_off: buzzer_output
  - id: update_min_tach
    then:
      - while:
          condition:
            lambda: |-
              return true;
          then:
          - lambda: |-
              int minValue = 65535;
              std::vector<pulse_counter::PulseCounterSensor*> tachs = {fan_0_tach, fan_1_tach, fan_2_tach, fan_3_tach, fan_4_tach, fan_5_tach, fan_6_tach, fan_7_tach, fan_8_tach};
              for (uint8_t i = 0; i < id(num_fans) && i < tachs.size(); i++) {
                if (id(tachs[i]).state < minValue) {
                  minValue = id(tachs[i]).state;
                }
              }
              id(min_tach).publish_state(minValue);
          - if:
              condition:
                lambda: 'return id(fan_0).state && id(filter_runtime_internal).state > 10;'
              then:
                - if:
                    condition:
                      lambda: 'return id(min_tach).state < id(min_tach_alarm_light_threshold);'
                    then:
                      - light.turn_on:
                          id: indicator_light
                          brightness: 100%
                          red: 100%
                          green: 0%
                          blue: 0%
                      - binary_sensor.template.publish:
                          id: min_tach_alarm
                          state: ON
                    else:
                      # If light is already on (red), set it to orange
                      - if:
                          condition:
                            light.is_on: indicator_light
                          then:
                            - light.turn_on:
                                id: indicator_light
                                brightness: 100%
                                red: 100%
                                green: 50%
                                blue: 0%
                      - binary_sensor.template.publish:
                          id: min_tach_alarm
                          state: OFF
                - if:
                    condition:
                      lambda: 'return id(min_tach).state < id(min_tach_alarm_sound_threshold);'
                    then:
                      - switch.template.publish:
                          id: buzzer_continuous
                          state: ON
                      - script.execute: turn_on_buzzer
                    else:
                      - script.execute: turn_off_buzzer
              else: # Fan off or not yet running for 10s
                - script.execute: turn_off_buzzer
                - binary_sensor.template.publish:
                    id: min_tach_alarm
                    state: OFF

          - delay: 5s
